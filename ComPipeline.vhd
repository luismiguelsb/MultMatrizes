-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC;
    a_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_B : OUT STD_LOGIC;
    a_WEN_B : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_Din_B : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_Dout_B : IN STD_LOGIC_VECTOR (7 downto 0);
    a_Clk_B : OUT STD_LOGIC;
    a_Rst_B : OUT STD_LOGIC;
    b_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_EN_A : OUT STD_LOGIC;
    b_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_Clk_A : OUT STD_LOGIC;
    b_Rst_A : OUT STD_LOGIC;
    b_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_EN_B : OUT STD_LOGIC;
    b_WEN_B : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_Din_B : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_Dout_B : IN STD_LOGIC_VECTOR (7 downto 0);
    b_Clk_B : OUT STD_LOGIC;
    b_Rst_B : OUT STD_LOGIC;
    res_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_EN_A : OUT STD_LOGIC;
    res_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    res_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    res_Clk_A : OUT STD_LOGIC;
    res_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-2l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.440000,HLS_SYN_LAT=111,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=148,HLS_SYN_LUT=283}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st7_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv61_3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal indvar_flatten_reg_204 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_215 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_226 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_237 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_83 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_99 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_109 : BOOLEAN;
    signal reg_242 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_550_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_253_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next_reg_554 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_mid2_fu_271_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_559 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_fu_279_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_311_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_573 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast4_fu_343_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast4_reg_592 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_2_fu_409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_reg_627 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_456_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_reg_652 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_5_fu_477_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_5_reg_657 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_543_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_662 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_483_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_667 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_536_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_529_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_677 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_phi_fu_208_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_phi_fu_219_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_230_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_cast_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_448_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal res_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_259_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_287_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_299_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_295_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_307_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_317_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_328_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_347_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast5_fu_339_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_358_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_373_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast_fu_387_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_390_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_2_fu_409_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_fu_409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_415_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_425_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast6_fu_435_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_5_fu_477_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_5_fu_477_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_521_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_521_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_521_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_529_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_536_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_536_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_543_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_543_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_4 : STD_LOGIC;
    signal ap_sig_418 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_521_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_521_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_529_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_529_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_536_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_536_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_543_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_543_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_fu_409_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_fu_409_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_5_fu_477_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_5_fu_477_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component matrixmul_mac_muladd_8ns_8ns_16ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrixmul_mac_muladd_8ns_8ns_16ns_16_1_U0 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_521_p0,
        din1 => grp_fu_521_p1,
        din2 => tmp4_reg_677,
        dout => grp_fu_521_p3);

    matrixmul_mac_muladd_8ns_8ns_16ns_16_1_U1 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_529_p0,
        din1 => grp_fu_529_p1,
        din2 => tmp_7_5_reg_657,
        dout => grp_fu_529_p3);

    matrixmul_mac_muladd_8ns_8ns_16ns_16_1_U2 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_536_p0,
        din1 => grp_fu_536_p1,
        din2 => tmp2_reg_662,
        dout => grp_fu_536_p3);

    matrixmul_mac_muladd_8ns_8ns_16ns_16_1_U3 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_543_p0,
        din1 => grp_fu_543_p1,
        din2 => tmp_7_2_reg_627,
        dout => grp_fu_543_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond_flatten_fu_247_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not((exitcond_flatten_reg_550 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                i_reg_215 <= tmp_mid2_v_reg_568;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_215 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                indvar_flatten_reg_204 <= indvar_flatten_next_reg_554;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_204 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                j_reg_226 <= j_1_reg_667;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_226 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                reg_237 <= a_Dout_A;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_550 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
                reg_237 <= a_Dout_B;
            end if; 
        end if;
    end process;

    reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                reg_242 <= b_Dout_A;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_550 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
                reg_242 <= b_Dout_B;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_550_pp0_iter1 <= exitcond_flatten_reg_550;
                exitcond_flatten_reg_550 <= exitcond_flatten_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then
                indvar_flatten_next_reg_554 <= indvar_flatten_next_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then
                j_1_reg_667 <= j_1_fu_483_p2;
                tmp2_reg_662 <= grp_fu_543_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond_flatten_fu_247_p2))) then
                j_mid2_reg_559 <= j_mid2_fu_271_p3;
                    tmp_2_cast4_reg_592(2 downto 0) <= tmp_2_cast4_fu_343_p1(2 downto 0);
                    tmp_4_reg_573(6 downto 1) <= tmp_4_fu_311_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then
                tmp1_reg_672 <= grp_fu_536_p3;
                tmp4_reg_677 <= grp_fu_529_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then
                tmp_17_reg_652 <= tmp_17_fu_456_p2;
                tmp_7_5_reg_657 <= tmp_7_5_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_550 = ap_const_lv1_0))) then
                tmp_7_2_reg_627 <= tmp_7_2_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond_flatten_fu_247_p2))) then
                tmp_mid2_v_reg_568 <= tmp_mid2_v_fu_279_p3;
            end if;
        end if;
    end process;
    tmp_4_reg_573(0) <= '0';
    tmp_2_cast4_reg_592(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, exitcond_flatten_fu_247_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_247_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_4;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_4;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st7_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_9_cast_fu_323_p1, tmp_4_cast_fu_369_p1, tmp_10_cast_fu_420_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                a_Addr_A_orig <= tmp_10_cast_fu_420_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                a_Addr_A_orig <= tmp_4_cast_fu_369_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                a_Addr_A_orig <= tmp_9_cast_fu_323_p1(32 - 1 downto 0);
            else 
                a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Addr_B <= std_logic_vector(shift_left(unsigned(a_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    a_Addr_B_orig_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_12_cast_fu_334_p1, tmp_8_cast_fu_378_p1, tmp_11_cast_fu_430_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                a_Addr_B_orig <= tmp_11_cast_fu_430_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                a_Addr_B_orig <= tmp_8_cast_fu_378_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                a_Addr_B_orig <= tmp_12_cast_fu_334_p1(32 - 1 downto 0);
            else 
                a_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Clk_B <= ap_clk;
    a_Din_A <= ap_const_lv8_0;
    a_Din_B <= ap_const_lv8_0;

    a_EN_A_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    a_EN_B_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then 
            a_EN_B <= ap_const_logic_1;
        else 
            a_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;
    a_Rst_B <= ap_rst;
    a_WEN_A <= ap_const_lv1_0;
    a_WEN_B <= ap_const_lv1_0;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st7_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_109 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_418_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_418 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_83 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_99 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_109)
    begin
        if (ap_sig_109) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_83)
    begin
        if (ap_sig_83) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_99)
    begin
        if (ap_sig_99) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_4_assign_proc : process(ap_sig_418)
    begin
        if (ap_sig_418) then 
            ap_sig_cseq_ST_st7_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    b_Addr_A <= std_logic_vector(shift_left(unsigned(b_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    b_Addr_A_orig_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_14_cast_fu_353_p1, tmp_2_fu_383_p1, tmp_15_cast_fu_443_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                b_Addr_A_orig <= tmp_15_cast_fu_443_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                b_Addr_A_orig <= tmp_2_fu_383_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                b_Addr_A_orig <= tmp_14_cast_fu_353_p1(32 - 1 downto 0);
            else 
                b_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_Addr_B <= std_logic_vector(shift_left(unsigned(b_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    b_Addr_B_orig_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_17_cast_fu_364_p1, tmp_13_cast_fu_396_p1, tmp_15_fu_448_p3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                b_Addr_B_orig <= tmp_15_fu_448_p3(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                b_Addr_B_orig <= tmp_13_cast_fu_396_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                b_Addr_B_orig <= tmp_17_cast_fu_364_p1(32 - 1 downto 0);
            else 
                b_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_Clk_A <= ap_clk;
    b_Clk_B <= ap_clk;
    b_Din_A <= ap_const_lv8_0;
    b_Din_B <= ap_const_lv8_0;

    b_EN_A_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then 
            b_EN_A <= ap_const_logic_1;
        else 
            b_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    b_EN_B_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then 
            b_EN_B <= ap_const_logic_1;
        else 
            b_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    b_Rst_A <= ap_rst;
    b_Rst_B <= ap_rst;
    b_WEN_A <= ap_const_lv1_0;
    b_WEN_B <= ap_const_lv1_0;
    exitcond_flatten_fu_247_p2 <= "1" when (indvar_flatten_phi_fu_208_p4 = ap_const_lv6_24) else "0";
    exitcond_fu_265_p2 <= "1" when (j_phi_fu_230_p4 = ap_const_lv3_6) else "0";
    grp_fu_521_p0 <= grp_fu_521_p00(8 - 1 downto 0);
    grp_fu_521_p00 <= std_logic_vector(resize(unsigned(reg_242),16));
    grp_fu_521_p1 <= grp_fu_521_p10(8 - 1 downto 0);
    grp_fu_521_p10 <= std_logic_vector(resize(unsigned(reg_237),16));
    grp_fu_529_p0 <= grp_fu_529_p00(8 - 1 downto 0);
    grp_fu_529_p00 <= std_logic_vector(resize(unsigned(b_Dout_B),16));
    grp_fu_529_p1 <= grp_fu_529_p10(8 - 1 downto 0);
    grp_fu_529_p10 <= std_logic_vector(resize(unsigned(a_Dout_B),16));
    grp_fu_536_p0 <= grp_fu_536_p00(8 - 1 downto 0);
    grp_fu_536_p00 <= std_logic_vector(resize(unsigned(reg_242),16));
    grp_fu_536_p1 <= grp_fu_536_p10(8 - 1 downto 0);
    grp_fu_536_p10 <= std_logic_vector(resize(unsigned(reg_237),16));
    grp_fu_543_p0 <= grp_fu_543_p00(8 - 1 downto 0);
    grp_fu_543_p00 <= std_logic_vector(resize(unsigned(b_Dout_A),16));
    grp_fu_543_p1 <= grp_fu_543_p10(8 - 1 downto 0);
    grp_fu_543_p10 <= std_logic_vector(resize(unsigned(a_Dout_A),16));
    i_1_fu_259_p2 <= std_logic_vector(unsigned(i_phi_fu_219_p4) + unsigned(ap_const_lv3_1));

    i_phi_fu_219_p4_assign_proc : process(i_reg_215, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_550, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_mid2_v_reg_568)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            i_phi_fu_219_p4 <= tmp_mid2_v_reg_568;
        else 
            i_phi_fu_219_p4 <= i_reg_215;
        end if; 
    end process;

    indvar_flatten_next_fu_253_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_208_p4) + unsigned(ap_const_lv6_1));

    indvar_flatten_phi_fu_208_p4_assign_proc : process(indvar_flatten_reg_204, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_550, ap_sig_cseq_ST_pp0_stg0_fsm_1, indvar_flatten_next_reg_554)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            indvar_flatten_phi_fu_208_p4 <= indvar_flatten_next_reg_554;
        else 
            indvar_flatten_phi_fu_208_p4 <= indvar_flatten_reg_204;
        end if; 
    end process;

    j_1_fu_483_p2 <= std_logic_vector(unsigned(j_mid2_reg_559) + unsigned(ap_const_lv3_1));
    j_mid2_fu_271_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_265_p2(0) = '1') else 
        j_phi_fu_230_p4;

    j_phi_fu_230_p4_assign_proc : process(j_reg_226, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_550, ap_sig_cseq_ST_pp0_stg0_fsm_1, j_1_reg_667)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            j_phi_fu_230_p4 <= j_1_reg_667;
        else 
            j_phi_fu_230_p4 <= j_reg_226;
        end if; 
    end process;

    p_shl1_cast_fu_307_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_299_p3),7));
    p_shl_cast_fu_295_p1 <= std_logic_vector(resize(unsigned(tmp_fu_287_p3),7));
    res_Addr_A <= std_logic_vector(shift_left(unsigned(res_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    res_Addr_A_orig <= tmp_18_cast_fu_504_p1(32 - 1 downto 0);
    res_Clk_A <= ap_clk;
    res_Din_A <= std_logic_vector(unsigned(tmp1_reg_672) + unsigned(grp_fu_521_p3));

    res_EN_A_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_EN_A <= ap_const_logic_1;
        else 
            res_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    res_Rst_A <= ap_rst;

    res_WEN_A_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_550_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_550_pp0_iter1)))) then 
            res_WEN_A <= ap_const_lv2_3;
        else 
            res_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

        tmp_10_cast_fu_420_p1 <= std_logic_vector(resize(signed(tmp_s_fu_415_p2),64));

    tmp_10_fu_425_p2 <= std_logic_vector(unsigned(tmp_4_reg_573) + unsigned(ap_const_lv7_4));
        tmp_11_cast_fu_430_p1 <= std_logic_vector(resize(signed(tmp_10_fu_425_p2),64));

    tmp_11_fu_328_p2 <= std_logic_vector(unsigned(tmp_4_fu_311_p2) + unsigned(ap_const_lv7_5));
        tmp_12_cast_fu_334_p1 <= std_logic_vector(resize(signed(tmp_11_fu_328_p2),64));

    tmp_12_fu_390_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_387_p1) + unsigned(ap_const_lv4_6));
    tmp_13_cast_fu_396_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_390_p2),64));
    tmp_13_fu_347_p2 <= std_logic_vector(unsigned(tmp_2_cast4_fu_343_p1) + unsigned(ap_const_lv5_C));
    tmp_14_cast_fu_353_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_347_p2),64));
    tmp_14_fu_438_p2 <= std_logic_vector(unsigned(tmp_2_cast4_reg_592) + unsigned(ap_const_lv5_12));
    tmp_15_cast_fu_443_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_438_p2),64));
    tmp_15_fu_448_p3 <= (ap_const_lv61_3 & j_mid2_reg_559);
    tmp_16_fu_358_p2 <= std_logic_vector(unsigned(tmp_2_cast5_fu_339_p1) + unsigned(ap_const_lv6_1E));
    tmp_17_cast_fu_364_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_358_p2),64));
    tmp_17_fu_456_p2 <= std_logic_vector(unsigned(tmp_4_reg_573) + unsigned(tmp_2_cast6_fu_435_p1));
        tmp_18_cast_fu_504_p1 <= std_logic_vector(resize(signed(tmp_17_reg_652),64));

    tmp_1_fu_299_p3 <= (tmp_mid2_v_fu_279_p3 & ap_const_lv1_0);
    tmp_2_cast4_fu_343_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_271_p3),5));
    tmp_2_cast5_fu_339_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_271_p3),6));
    tmp_2_cast6_fu_435_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_559),7));
    tmp_2_cast_fu_387_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_559),4));
    tmp_2_fu_383_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_559),64));
        tmp_4_cast_fu_369_p1 <= std_logic_vector(resize(signed(tmp_4_reg_573),64));

    tmp_4_fu_311_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_295_p1) - unsigned(p_shl1_cast_fu_307_p1));
    tmp_7_2_fu_409_p0 <= tmp_7_2_fu_409_p00(8 - 1 downto 0);
    tmp_7_2_fu_409_p00 <= std_logic_vector(resize(unsigned(b_Dout_A),16));
    tmp_7_2_fu_409_p1 <= tmp_7_2_fu_409_p10(8 - 1 downto 0);
    tmp_7_2_fu_409_p10 <= std_logic_vector(resize(unsigned(a_Dout_A),16));
    tmp_7_2_fu_409_p2 <= std_logic_vector(resize(unsigned(tmp_7_2_fu_409_p0) * unsigned(tmp_7_2_fu_409_p1), 16));
    tmp_7_5_fu_477_p0 <= tmp_7_5_fu_477_p00(8 - 1 downto 0);
    tmp_7_5_fu_477_p00 <= std_logic_vector(resize(unsigned(reg_242),16));
    tmp_7_5_fu_477_p1 <= tmp_7_5_fu_477_p10(8 - 1 downto 0);
    tmp_7_5_fu_477_p10 <= std_logic_vector(resize(unsigned(reg_237),16));
    tmp_7_5_fu_477_p2 <= std_logic_vector(resize(unsigned(tmp_7_5_fu_477_p0) * unsigned(tmp_7_5_fu_477_p1), 16));
    tmp_8_cast_fu_378_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_373_p2),64));
    tmp_8_fu_373_p2 <= (tmp_4_reg_573 or ap_const_lv7_1);
        tmp_9_cast_fu_323_p1 <= std_logic_vector(resize(signed(tmp_9_fu_317_p2),64));

    tmp_9_fu_317_p2 <= std_logic_vector(unsigned(tmp_4_fu_311_p2) + unsigned(ap_const_lv7_2));
    tmp_fu_287_p3 <= (tmp_mid2_v_fu_279_p3 & ap_const_lv3_0);
    tmp_mid2_v_fu_279_p3 <= 
        i_1_fu_259_p2 when (exitcond_fu_265_p2(0) = '1') else 
        i_phi_fu_219_p4;
    tmp_s_fu_415_p2 <= std_logic_vector(unsigned(tmp_4_reg_573) + unsigned(ap_const_lv7_3));
end behav;
