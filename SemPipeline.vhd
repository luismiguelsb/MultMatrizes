-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC;
    b_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_EN_A : OUT STD_LOGIC;
    b_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_Clk_A : OUT STD_LOGIC;
    b_Rst_A : OUT STD_LOGIC;
    res_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_EN_A : OUT STD_LOGIC;
    res_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    res_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    res_Clk_A : OUT STD_LOGIC;
    res_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-2l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.740000,HLS_SYN_LAT=517,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=54,HLS_SYN_LUT=71}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal i_1_fu_139_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_286 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_64 : BOOLEAN;
    signal tmp_s_fu_169_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_291 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_181_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_300 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_79 : BOOLEAN;
    signal tmp_2_cast_fu_187_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast_reg_305 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_addr_reg_310 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_fu_207_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_318 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_95 : BOOLEAN;
    signal exitcond_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_275_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_111 : BOOLEAN;
    signal i_reg_87 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_98 : STD_LOGIC_VECTOR (2 downto 0);
    signal res_load_reg_109 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_122 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_cast_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_145_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_157_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_153_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_165_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_191_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_cast_fu_213_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_217_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_227_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_239_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_235_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_247_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_257_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_275_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_275_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component matrixmul_mac_muladd_8ns_8ns_16ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrixmul_mac_muladd_8ns_8ns_16ns_16_1_U0 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        din2 => res_load_reg_109,
        dout => grp_fu_275_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_175_p2)))) then 
                i_reg_87 <= i_1_reg_286;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_87 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_201_p2)))) then 
                j_reg_98 <= j_1_reg_300;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_133_p2 = ap_const_lv1_0))) then 
                j_reg_98 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                k_reg_122 <= k_1_reg_318;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_175_p2))) then 
                k_reg_122 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    res_load_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                res_load_reg_109 <= grp_fu_275_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_175_p2))) then 
                res_load_reg_109 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_286 <= i_1_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_300 <= j_1_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_1_reg_318 <= k_1_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_175_p2))) then
                res_addr_reg_310 <= tmp_11_cast_fu_196_p1(6 - 1 downto 0);
                    tmp_2_cast_reg_305(2 downto 0) <= tmp_2_cast_fu_187_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_133_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_291(6 downto 1) <= tmp_s_fu_169_p2(6 downto 1);
            end if;
        end if;
    end process;
    tmp_s_reg_291(0) <= '0';
    tmp_2_cast_reg_305(6 downto 3) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_133_p2, exitcond1_fu_175_p2, exitcond_fu_201_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_133_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_175_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_201_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    a_Addr_A_orig <= tmp_12_cast_fu_222_p1(32 - 1 downto 0);
    a_Clk_A <= ap_clk;
    a_Din_A <= ap_const_lv8_0;

    a_EN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;
    a_WEN_A <= ap_const_lv1_0;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_133_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_133_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_133_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_133_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_111 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_64 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_79 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_95 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_64)
    begin
        if (ap_sig_64) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_79)
    begin
        if (ap_sig_79) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_95)
    begin
        if (ap_sig_95) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_111)
    begin
        if (ap_sig_111) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    b_Addr_A <= std_logic_vector(shift_left(unsigned(b_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    b_Addr_A_orig <= tmp_16_cast_fu_262_p1(32 - 1 downto 0);
    b_Clk_A <= ap_clk;
    b_Din_A <= ap_const_lv8_0;

    b_EN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            b_EN_A <= ap_const_logic_1;
        else 
            b_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_Rst_A <= ap_rst;
    b_WEN_A <= ap_const_lv1_0;
    exitcond1_fu_175_p2 <= "1" when (j_reg_98 = ap_const_lv3_6) else "0";
    exitcond2_fu_133_p2 <= "1" when (i_reg_87 = ap_const_lv3_6) else "0";
    exitcond_fu_201_p2 <= "1" when (k_reg_122 = ap_const_lv3_6) else "0";
    grp_fu_275_p0 <= grp_fu_275_p00(8 - 1 downto 0);
    grp_fu_275_p00 <= std_logic_vector(resize(unsigned(b_Dout_A),16));
    grp_fu_275_p1 <= grp_fu_275_p10(8 - 1 downto 0);
    grp_fu_275_p10 <= std_logic_vector(resize(unsigned(a_Dout_A),16));
    i_1_fu_139_p2 <= std_logic_vector(unsigned(i_reg_87) + unsigned(ap_const_lv3_1));
    j_1_fu_181_p2 <= std_logic_vector(unsigned(j_reg_98) + unsigned(ap_const_lv3_1));
    k_1_fu_207_p2 <= std_logic_vector(unsigned(k_reg_122) + unsigned(ap_const_lv3_1));
    p_shl1_cast_fu_165_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_157_p3),7));
    p_shl2_cast_fu_235_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_227_p3),7));
    p_shl3_cast_fu_247_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_239_p3),7));
    p_shl_cast_fu_153_p1 <= std_logic_vector(resize(unsigned(tmp_fu_145_p3),7));
    res_Addr_A <= std_logic_vector(shift_left(unsigned(res_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    res_Addr_A_orig <= std_logic_vector(resize(unsigned(res_addr_reg_310),32));
    res_Clk_A <= ap_clk;
    res_Din_A <= res_load_reg_109;

    res_EN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            res_EN_A <= ap_const_logic_1;
        else 
            res_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    res_Rst_A <= ap_rst;

    res_WEN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            res_WEN_A <= ap_const_lv2_3;
        else 
            res_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    tmp_10_fu_227_p3 <= (k_reg_122 & ap_const_lv3_0);
        tmp_11_cast_fu_196_p1 <= std_logic_vector(resize(signed(tmp_2_fu_191_p2),64));

    tmp_11_fu_239_p3 <= (k_reg_122 & ap_const_lv1_0);
        tmp_12_cast_fu_222_p1 <= std_logic_vector(resize(signed(tmp_4_fu_217_p2),64));

    tmp_12_fu_251_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_235_p1) - unsigned(p_shl3_cast_fu_247_p1));
    tmp_13_fu_257_p2 <= std_logic_vector(unsigned(tmp_12_fu_251_p2) + unsigned(tmp_2_cast_reg_305));
        tmp_16_cast_fu_262_p1 <= std_logic_vector(resize(signed(tmp_13_fu_257_p2),64));

    tmp_2_cast_fu_187_p1 <= std_logic_vector(resize(unsigned(j_reg_98),7));
    tmp_2_fu_191_p2 <= std_logic_vector(unsigned(tmp_s_reg_291) + unsigned(tmp_2_cast_fu_187_p1));
    tmp_4_cast_fu_213_p1 <= std_logic_vector(resize(unsigned(k_reg_122),7));
    tmp_4_fu_217_p2 <= std_logic_vector(unsigned(tmp_s_reg_291) + unsigned(tmp_4_cast_fu_213_p1));
    tmp_9_fu_157_p3 <= (i_reg_87 & ap_const_lv1_0);
    tmp_fu_145_p3 <= (i_reg_87 & ap_const_lv3_0);
    tmp_s_fu_169_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_153_p1) - unsigned(p_shl1_cast_fu_165_p1));
end behav;
