-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc3s500efg320-4,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.470000,HLS_SYN_LAT=233,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=80}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_21 : BOOLEAN;
    signal i_1_fu_139_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_54 : BOOLEAN;
    signal tmp_9_cast_fu_153_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_cast_reg_258 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_163_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_69 : BOOLEAN;
    signal tmp_2_cast_fu_169_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast_reg_272 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_addr_reg_277 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_fu_189_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_285 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_85 : BOOLEAN;
    signal exitcond_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_239_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_300 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_101 : BOOLEAN;
    signal tmp_8_fu_245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_110 : BOOLEAN;
    signal i_reg_87 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_98 : STD_LOGIC_VECTOR (2 downto 0);
    signal res_load_reg_109 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_122 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_cast_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_145_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_173_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_cast_fu_195_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_199_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_209_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_cast_fu_217_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_221_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_239_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_239_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_239_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_239_p10 : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_157_p2)))) then 
                i_reg_87 <= i_1_reg_253;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_87 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_183_p2)))) then 
                j_reg_98 <= j_1_reg_267;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_133_p2 = ap_const_lv1_0))) then 
                j_reg_98 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                k_reg_122 <= k_1_reg_285;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_157_p2))) then 
                k_reg_122 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    res_load_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                res_load_reg_109 <= tmp_8_fu_245_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_157_p2))) then 
                res_load_reg_109 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_253 <= i_1_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_267 <= j_1_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_1_reg_285 <= k_1_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_157_p2))) then
                res_addr_reg_277 <= tmp_10_cast_fu_178_p1(4 - 1 downto 0);
                    tmp_2_cast_reg_272(2 downto 0) <= tmp_2_cast_fu_169_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_7_reg_300 <= tmp_7_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_133_p2 = ap_const_lv1_0))) then
                    tmp_9_cast_reg_258(4 downto 2) <= tmp_9_cast_fu_153_p1(4 downto 2);
            end if;
        end if;
    end process;
    tmp_9_cast_reg_258(1 downto 0) <= "00";
    tmp_9_cast_reg_258(5) <= '0';
    tmp_2_cast_reg_272(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_133_p2, exitcond1_fu_157_p2, exitcond_fu_183_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_133_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_157_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_183_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_address0 <= tmp_11_cast_fu_204_p1(4 - 1 downto 0);

    a_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_133_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_133_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_133_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_133_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_101 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_110 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_54 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_69 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_85 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_21)
    begin
        if (ap_sig_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_54)
    begin
        if (ap_sig_54) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_69)
    begin
        if (ap_sig_69) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_85)
    begin
        if (ap_sig_85) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_101)
    begin
        if (ap_sig_101) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_110)
    begin
        if (ap_sig_110) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_14_cast_fu_226_p1(4 - 1 downto 0);

    b_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_157_p2 <= "1" when (j_reg_98 = ap_const_lv3_4) else "0";
    exitcond2_fu_133_p2 <= "1" when (i_reg_87 = ap_const_lv3_4) else "0";
    exitcond_fu_183_p2 <= "1" when (k_reg_122 = ap_const_lv3_4) else "0";
    i_1_fu_139_p2 <= std_logic_vector(unsigned(i_reg_87) + unsigned(ap_const_lv3_1));
    j_1_fu_163_p2 <= std_logic_vector(unsigned(j_reg_98) + unsigned(ap_const_lv3_1));
    k_1_fu_189_p2 <= std_logic_vector(unsigned(k_reg_122) + unsigned(ap_const_lv3_1));
    res_address0 <= res_addr_reg_277;

    res_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= res_load_reg_109;

    res_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_178_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_173_p2),64));
    tmp_11_cast_fu_204_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_199_p2),64));
    tmp_13_cast_fu_217_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_209_p3),6));
    tmp_14_cast_fu_226_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_221_p2),64));
    tmp_2_cast_fu_169_p1 <= std_logic_vector(resize(unsigned(j_reg_98),6));
    tmp_2_fu_199_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_195_p1) + unsigned(tmp_9_cast_reg_258));
    tmp_4_cast_fu_195_p1 <= std_logic_vector(resize(unsigned(k_reg_122),6));
    tmp_4_fu_209_p3 <= (k_reg_122 & ap_const_lv2_0);
    tmp_7_fu_239_p0 <= tmp_7_fu_239_p00(8 - 1 downto 0);
    tmp_7_fu_239_p00 <= std_logic_vector(resize(unsigned(a_q0),16));
    tmp_7_fu_239_p1 <= tmp_7_fu_239_p10(8 - 1 downto 0);
    tmp_7_fu_239_p10 <= std_logic_vector(resize(unsigned(b_q0),16));
    tmp_7_fu_239_p2 <= std_logic_vector(resize(unsigned(tmp_7_fu_239_p0) * unsigned(tmp_7_fu_239_p1), 16));
    tmp_8_fu_245_p2 <= std_logic_vector(unsigned(res_load_reg_109) + unsigned(tmp_7_reg_300));
    tmp_9_cast_fu_153_p1 <= std_logic_vector(resize(unsigned(tmp_fu_145_p3),6));
    tmp_9_fu_221_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_272) + unsigned(tmp_13_cast_fu_217_p1));
    tmp_fu_145_p3 <= (i_reg_87 & ap_const_lv2_0);
    tmp_s_fu_173_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_258) + unsigned(tmp_2_cast_fu_169_p1));
end behav;
